/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ApiResourcesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取身份资源列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getApiResources(skip: number | null | undefined, take: number | null | undefined, search: string | null | undefined): Promise<PaginationResultOfApiResourceDto> {
        let url_ = this.baseUrl + "/api/ApiResources?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiResources(_response);
        });
    }

    protected processGetApiResources(response: Response): Promise<PaginationResultOfApiResourceDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfApiResourceDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfApiResourceDto>(<any>null);
    }

    /**
     * 创建或者更新身份资源
     */
    createOrUpdateApiResource(dto: ApiResourceDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ApiResources";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateApiResource(_response);
        });
    }

    protected processCreateOrUpdateApiResource(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 根据id获取身份资源
     */
    getApiResourceById(id: number): Promise<ApiResourceDto> {
        let url_ = this.baseUrl + "/api/ApiResources/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiResourceById(_response);
        });
    }

    protected processGetApiResourceById(response: Response): Promise<ApiResourceDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResourceDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResourceDto>(<any>null);
    }

    /**
     * 删除api资源
     */
    deleteApiResource(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ApiResources/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteApiResource(_response);
        });
    }

    protected processDeleteApiResource(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 推荐的用户声明
     */
    getRecommendUserClaims(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/ApiResources/RecommendUserClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecommendUserClaims(_response);
        });
    }

    protected processGetRecommendUserClaims(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class ApiScopesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取api作用域列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getApiScopes(skip: number | null | undefined, take: number | null | undefined, search: string | null | undefined): Promise<PaginationResultOfApiScopeDto> {
        let url_ = this.baseUrl + "/api/ApiScopes?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiScopes(_response);
        });
    }

    protected processGetApiScopes(response: Response): Promise<PaginationResultOfApiScopeDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfApiScopeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfApiScopeDto>(<any>null);
    }

    /**
     * 创建或者更新api作用域
     */
    createOrUpdateApiScope(dto: ApiScopeDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ApiScopes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateApiScope(_response);
        });
    }

    protected processCreateOrUpdateApiScope(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 根据id获取api作用域
     */
    getApiScopeById(id: number): Promise<ApiScopeDto> {
        let url_ = this.baseUrl + "/api/ApiScopes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiScopeById(_response);
        });
    }

    protected processGetApiScopeById(response: Response): Promise<ApiScopeDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiScopeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiScopeDto>(<any>null);
    }

    /**
     * 删除api作用域
     */
    deleteApiScope(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ApiScopes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteApiScope(_response);
        });
    }

    protected processDeleteApiScope(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ClientsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取客户端列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getClients(skip: number | null | undefined, take: number | null | undefined, search: string | null | undefined): Promise<PaginationResultOfClientDto> {
        let url_ = this.baseUrl + "/api/Clients?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClients(_response);
        });
    }

    protected processGetClients(response: Response): Promise<PaginationResultOfClientDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfClientDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfClientDto>(<any>null);
    }

    /**
     * 创建或者更新客户端
     */
    createOrUpdateClient(dto: ClientDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateClient(_response);
        });
    }

    protected processCreateOrUpdateClient(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 通过id获取客户端
     */
    getClientById(id: number): Promise<ClientDto> {
        let url_ = this.baseUrl + "/api/Clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClientById(_response);
        });
    }

    protected processGetClientById(response: Response): Promise<ClientDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClientDto>(<any>null);
    }

    /**
     * 通过id删除客户端
     */
    deleteClientById(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteClientById(_response);
        });
    }

    protected processDeleteClientById(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 默认授权类型
     */
    getExampleGrantTypes(): Promise<ExampleGrantType[]> {
        let url_ = this.baseUrl + "/api/Clients/ExampleGrantTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExampleGrantTypes(_response);
        });
    }

    protected processGetExampleGrantTypes(response: Response): Promise<ExampleGrantType[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExampleGrantType.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExampleGrantType[]>(<any>null);
    }

    /**
     * 可用的作用域
     */
    getAllEnabledScopes(): Promise<EnabledScopeDto[]> {
        let url_ = this.baseUrl + "/api/Clients/AllEnabledScopes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllEnabledScopes(_response);
        });
    }

    protected processGetAllEnabledScopes(response: Response): Promise<EnabledScopeDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EnabledScopeDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnabledScopeDto[]>(<any>null);
    }
}

export class FilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取头像
     * @param name (optional) 
     */
    get(name: string | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Files?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class IdentityResourcesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取身份资源列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getIdentityResources(skip: number | null | undefined, take: number | null | undefined, search: string | null | undefined): Promise<PaginationResultOfIdentityResourceDto> {
        let url_ = this.baseUrl + "/api/IdentityResources?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIdentityResources(_response);
        });
    }

    protected processGetIdentityResources(response: Response): Promise<PaginationResultOfIdentityResourceDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfIdentityResourceDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfIdentityResourceDto>(<any>null);
    }

    /**
     * 创建或者更新身份资源
     */
    createOrUpdateIdentityResource(dto: IdentityResourceDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/IdentityResources";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateIdentityResource(_response);
        });
    }

    protected processCreateOrUpdateIdentityResource(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 根据id获取身份资源
     */
    getIdentityResourceById(id: number): Promise<IdentityResourceDto> {
        let url_ = this.baseUrl + "/api/IdentityResources/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIdentityResourceById(_response);
        });
    }

    protected processGetIdentityResourceById(response: Response): Promise<IdentityResourceDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResourceDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IdentityResourceDto>(<any>null);
    }

    /**
     * 删除身份资源
     */
    deleteIdentityResource(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/IdentityResources/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteIdentityResource(_response);
        });
    }

    protected processDeleteIdentityResource(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 推荐的用户声明
     */
    getRecommendUserClaims(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/IdentityResources/RecommendUserClaims";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecommendUserClaims(_response);
        });
    }

    protected processGetRecommendUserClaims(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class PermissonsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 获取所有权限
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getPermissons(skip: number | null | undefined, take: number | null | undefined, search: string | null | undefined): Promise<PaginationResultOfPermisson> {
        let url_ = this.baseUrl + "/api/Permissons?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPermissons(_response);
        });
    }

    protected processGetPermissons(response: Response): Promise<PaginationResultOfPermisson> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfPermisson.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfPermisson>(<any>null);
    }

    /**
     * 创建或者更新权限
     */
    createOrUpdatePermisson(permisson: Permisson): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Permissons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(permisson);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdatePermisson(_response);
        });
    }

    protected processCreateOrUpdatePermisson(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 根据id获取权限
     */
    getPermissonById(id: string | null): Promise<Permisson> {
        let url_ = this.baseUrl + "/api/Permissons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPermissonById(_response);
        });
    }

    protected processGetPermissonById(response: Response): Promise<Permisson> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Permisson.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Permisson>(<any>null);
    }

    /**
     * 删除权限
     */
    deletePermisson(id: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Permissons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePermisson(_response);
        });
    }

    protected processDeletePermisson(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class RolesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 查询角色列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getRoles(skip: number | undefined, take: number | undefined, search: string | null | undefined): Promise<PaginationResultOfApplicationRole> {
        let url_ = this.baseUrl + "/api/Roles?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRoles(_response);
        });
    }

    protected processGetRoles(response: Response): Promise<PaginationResultOfApplicationRole> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfApplicationRole.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfApplicationRole>(<any>null);
    }

    /**
     * 创建或者更新角色
     */
    createOrUpdateRole(role: ApplicationRole): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Roles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(role);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateRole(_response);
        });
    }

    protected processCreateOrUpdateRole(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 通过id获取角色
     */
    getRoleById(id: string | null): Promise<ApplicationRole> {
        let url_ = this.baseUrl + "/api/Roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRoleById(_response);
        });
    }

    protected processGetRoleById(response: Response): Promise<ApplicationRole> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationRole.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationRole>(<any>null);
    }

    /**
     * 删除角色
     */
    deleteRoleById(id: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRoleById(_response);
        });
    }

    protected processDeleteRoleById(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 获取角色拥有的权限
     */
    getRolePermissons(roleId: string | null): Promise<Permisson[]> {
        let url_ = this.baseUrl + "/api/Roles/{roleId}/permissons";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRolePermissons(_response);
        });
    }

    protected processGetRolePermissons(response: Response): Promise<Permisson[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Permisson.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Permisson[]>(<any>null);
    }

    /**
     * 重新分配权限到角色
     */
    reAddPermissonsToRole(roleId: string | null, dto: ReAddPermissonsToRoleDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Roles/{roleId}/permissons";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReAddPermissonsToRole(_response);
        });
    }

    protected processReAddPermissonsToRole(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:9999";
    }

    /**
     * 查询用户列表
     * @param skip (optional) 
     * @param take (optional) 
     * @param search (optional) 
     */
    getUsers(skip: number | undefined, take: number | undefined, search: string | null | undefined): Promise<PaginationResultOfApplicationUser> {
        let url_ = this.baseUrl + "/api/Users?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<PaginationResultOfApplicationUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginationResultOfApplicationUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginationResultOfApplicationUser>(<any>null);
    }

    /**
     * 创建或者更新用户
     */
    createOrUpdateUser(viewModel: CreateOrUpdateUserViewModel): Promise<string> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateUser(_response);
        });
    }

    protected processCreateOrUpdateUser(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * 通过id获取角色
     */
    getUserById(id: string | null): Promise<ApplicationUser> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<ApplicationUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationUser>(<any>null);
    }

    /**
     * 通过id删除用户
     */
    deleteUserById(id: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUserById(_response);
        });
    }

    protected processDeleteUserById(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 部分更新用户信息
     */
    patchUser(userId: string | null, document: Operation[]): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(document);

        let options_ = <RequestInit>{
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatchUser(_response);
        });
    }

    protected processPatchUser(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 获取用户拥有的角色
     */
    getRolesOfUser(userId: string | null): Promise<ApplicationRole[]> {
        let url_ = this.baseUrl + "/api/Users/{userId}/roles";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRolesOfUser(_response);
        });
    }

    protected processGetRolesOfUser(response: Response): Promise<ApplicationRole[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ApplicationRole.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationRole[]>(<any>null);
    }

    /**
     * 为用户分配角色
     */
    addToRoles(userId: string | null, dto: AddToRolesDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/{userId}/roles";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddToRoles(_response);
        });
    }

    protected processAddToRoles(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 获取用户声明
     */
    getUserClaims(userId: string | null): Promise<ApplicationIdentityUserClaim[]> {
        let url_ = this.baseUrl + "/api/Users/{userId}/claims";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserClaims(_response);
        });
    }

    protected processGetUserClaims(response: Response): Promise<ApplicationIdentityUserClaim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ApplicationIdentityUserClaim.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationIdentityUserClaim[]>(<any>null);
    }

    /**
     * 创建或者更新角色声明
     */
    createOrUpdateUserClaim(userId: string | null, claim: ApplicationIdentityUserClaim): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/{userId}/claims";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(claim);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrUpdateUserClaim(_response);
        });
    }

    protected processCreateOrUpdateUserClaim(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 删除用户声明
     */
    deleteUserClaim(userId: string | null, claimId: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/{userId}/claims/{claimId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUserClaim(_response);
        });
    }

    protected processDeleteUserClaim(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 用户拥有的权限
     */
    getPermissonsOfUser(userId: string | null): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Users/{userId}/Permissons";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPermissonsOfUser(_response);
        });
    }

    protected processGetPermissonsOfUser(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class Result implements IResult {
    succeeded?: boolean;
    errorMessage?: string | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["errorMessage"] = this.errorMessage;
        return data; 
    }
}

export interface IResult {
    succeeded?: boolean;
    errorMessage?: string | undefined;
}

export class PaginationResultOfApiResourceDto extends Result implements IPaginationResultOfApiResourceDto {
    rows?: ApiResourceDto[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfApiResourceDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(ApiResourceDto.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfApiResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfApiResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfApiResourceDto extends IResult {
    rows?: ApiResourceDto[] | undefined;
    total?: number;
    pageSize?: number;
}

export class ApiResourceDto implements IApiResourceDto {
    id?: number | undefined;
    name!: string;
    enabled?: boolean;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    scopes?: string[] | undefined;

    constructor(data?: IApiResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.enabled = _data["enabled"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): ApiResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["enabled"] = this.enabled;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data; 
    }
}

export interface IApiResourceDto {
    id?: number | undefined;
    name: string;
    enabled?: boolean;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    scopes?: string[] | undefined;
}

export class PaginationResultOfApiScopeDto extends Result implements IPaginationResultOfApiScopeDto {
    rows?: ApiScopeDto[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfApiScopeDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(ApiScopeDto.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfApiScopeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfApiScopeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfApiScopeDto extends IResult {
    rows?: ApiScopeDto[] | undefined;
    total?: number;
    pageSize?: number;
}

export abstract class Resource implements IResource {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    userClaims?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;

    constructor(data?: IResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        this.properties![key] = _data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): Resource {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Resource' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface IResource {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    userClaims?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;
}

export class ApiScope extends Resource implements IApiScope {
    required?: boolean;
    emphasize?: boolean;

    constructor(data?: IApiScope) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
        }
    }

    static fromJS(data: any): ApiScope {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiScope extends IResource {
    required?: boolean;
    emphasize?: boolean;
}

export class ApiScopeDto extends ApiScope implements IApiScopeDto {
    id?: number | undefined;

    constructor(data?: IApiScopeDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ApiScopeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScopeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiScopeDto extends IApiScope {
    id?: number | undefined;
}

export class PaginationResultOfClientDto extends Result implements IPaginationResultOfClientDto {
    rows?: ClientDto[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfClientDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(ClientDto.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfClientDto extends IResult {
    rows?: ClientDto[] | undefined;
    total?: number;
    pageSize?: number;
}

export class Client implements IClient {
    enabled?: boolean;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: Secret[] | undefined;
    requireClientSecret?: boolean;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean;
    allowRememberConsent?: boolean;
    allowedGrantTypes?: string[] | undefined;
    requirePkce?: boolean;
    allowPlainTextPkce?: boolean;
    requireRequestObject?: boolean;
    allowAccessTokensViaBrowser?: boolean;
    redirectUris?: string[] | undefined;
    postLogoutRedirectUris?: string[] | undefined;
    frontChannelLogoutUri?: string | undefined;
    frontChannelLogoutSessionRequired?: boolean;
    backChannelLogoutUri?: string | undefined;
    backChannelLogoutSessionRequired?: boolean;
    allowOfflineAccess?: boolean;
    allowedScopes?: string[] | undefined;
    alwaysIncludeUserClaimsInIdToken?: boolean;
    identityTokenLifetime?: number;
    allowedIdentityTokenSigningAlgorithms?: string[] | undefined;
    accessTokenLifetime?: number;
    authorizationCodeLifetime?: number;
    absoluteRefreshTokenLifetime?: number;
    slidingRefreshTokenLifetime?: number;
    consentLifetime?: number | undefined;
    refreshTokenUsage?: TokenUsage;
    updateAccessTokenClaimsOnRefresh?: boolean;
    refreshTokenExpiration?: TokenExpiration;
    accessTokenType?: AccessTokenType;
    enableLocalLogin?: boolean;
    identityProviderRestrictions?: string[] | undefined;
    includeJwtId?: boolean;
    claims?: ClientClaim[] | undefined;
    alwaysSendClientClaims?: boolean;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: string | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: string | undefined;
    deviceCodeLifetime?: number;
    allowedCorsOrigins?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.clientId = _data["clientId"];
            this.protocolType = _data["protocolType"];
            if (Array.isArray(_data["clientSecrets"])) {
                this.clientSecrets = [] as any;
                for (let item of _data["clientSecrets"])
                    this.clientSecrets!.push(Secret.fromJS(item));
            }
            this.requireClientSecret = _data["requireClientSecret"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            if (Array.isArray(_data["allowedGrantTypes"])) {
                this.allowedGrantTypes = [] as any;
                for (let item of _data["allowedGrantTypes"])
                    this.allowedGrantTypes!.push(item);
            }
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.requireRequestObject = _data["requireRequestObject"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(item);
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(item);
            }
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.backChannelLogoutUri = _data["backChannelLogoutUri"];
            this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
            this.allowOfflineAccess = _data["allowOfflineAccess"];
            if (Array.isArray(_data["allowedScopes"])) {
                this.allowedScopes = [] as any;
                for (let item of _data["allowedScopes"])
                    this.allowedScopes!.push(item);
            }
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            if (Array.isArray(_data["allowedIdentityTokenSigningAlgorithms"])) {
                this.allowedIdentityTokenSigningAlgorithms = [] as any;
                for (let item of _data["allowedIdentityTokenSigningAlgorithms"])
                    this.allowedIdentityTokenSigningAlgorithms!.push(item);
            }
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
            this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.refreshTokenUsage = _data["refreshTokenUsage"];
            this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"];
            this.accessTokenType = _data["accessTokenType"];
            this.enableLocalLogin = _data["enableLocalLogin"];
            if (Array.isArray(_data["identityProviderRestrictions"])) {
                this.identityProviderRestrictions = [] as any;
                for (let item of _data["identityProviderRestrictions"])
                    this.identityProviderRestrictions!.push(item);
            }
            this.includeJwtId = _data["includeJwtId"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClientClaim.fromJS(item));
            }
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.userCodeType = _data["userCodeType"];
            this.deviceCodeLifetime = _data["deviceCodeLifetime"];
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(item);
            }
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        this.properties![key] = _data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["clientId"] = this.clientId;
        data["protocolType"] = this.protocolType;
        if (Array.isArray(this.clientSecrets)) {
            data["clientSecrets"] = [];
            for (let item of this.clientSecrets)
                data["clientSecrets"].push(item.toJSON());
        }
        data["requireClientSecret"] = this.requireClientSecret;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        if (Array.isArray(this.allowedGrantTypes)) {
            data["allowedGrantTypes"] = [];
            for (let item of this.allowedGrantTypes)
                data["allowedGrantTypes"].push(item);
        }
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["requireRequestObject"] = this.requireRequestObject;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item);
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item);
        }
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["backChannelLogoutUri"] = this.backChannelLogoutUri;
        data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
        data["allowOfflineAccess"] = this.allowOfflineAccess;
        if (Array.isArray(this.allowedScopes)) {
            data["allowedScopes"] = [];
            for (let item of this.allowedScopes)
                data["allowedScopes"].push(item);
        }
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        if (Array.isArray(this.allowedIdentityTokenSigningAlgorithms)) {
            data["allowedIdentityTokenSigningAlgorithms"] = [];
            for (let item of this.allowedIdentityTokenSigningAlgorithms)
                data["allowedIdentityTokenSigningAlgorithms"].push(item);
        }
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
        data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["refreshTokenUsage"] = this.refreshTokenUsage;
        data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration;
        data["accessTokenType"] = this.accessTokenType;
        data["enableLocalLogin"] = this.enableLocalLogin;
        if (Array.isArray(this.identityProviderRestrictions)) {
            data["identityProviderRestrictions"] = [];
            for (let item of this.identityProviderRestrictions)
                data["identityProviderRestrictions"].push(item);
        }
        data["includeJwtId"] = this.includeJwtId;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["userCodeType"] = this.userCodeType;
        data["deviceCodeLifetime"] = this.deviceCodeLifetime;
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item);
        }
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface IClient {
    enabled?: boolean;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: Secret[] | undefined;
    requireClientSecret?: boolean;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean;
    allowRememberConsent?: boolean;
    allowedGrantTypes?: string[] | undefined;
    requirePkce?: boolean;
    allowPlainTextPkce?: boolean;
    requireRequestObject?: boolean;
    allowAccessTokensViaBrowser?: boolean;
    redirectUris?: string[] | undefined;
    postLogoutRedirectUris?: string[] | undefined;
    frontChannelLogoutUri?: string | undefined;
    frontChannelLogoutSessionRequired?: boolean;
    backChannelLogoutUri?: string | undefined;
    backChannelLogoutSessionRequired?: boolean;
    allowOfflineAccess?: boolean;
    allowedScopes?: string[] | undefined;
    alwaysIncludeUserClaimsInIdToken?: boolean;
    identityTokenLifetime?: number;
    allowedIdentityTokenSigningAlgorithms?: string[] | undefined;
    accessTokenLifetime?: number;
    authorizationCodeLifetime?: number;
    absoluteRefreshTokenLifetime?: number;
    slidingRefreshTokenLifetime?: number;
    consentLifetime?: number | undefined;
    refreshTokenUsage?: TokenUsage;
    updateAccessTokenClaimsOnRefresh?: boolean;
    refreshTokenExpiration?: TokenExpiration;
    accessTokenType?: AccessTokenType;
    enableLocalLogin?: boolean;
    identityProviderRestrictions?: string[] | undefined;
    includeJwtId?: boolean;
    claims?: ClientClaim[] | undefined;
    alwaysSendClientClaims?: boolean;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: string | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: string | undefined;
    deviceCodeLifetime?: number;
    allowedCorsOrigins?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;
}

export class ClientDto extends Client implements IClientDto {
    id?: number | undefined;

    constructor(data?: IClientDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IClientDto extends IClient {
    id?: number | undefined;
}

export class Secret implements ISecret {
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;

    constructor(data?: ISecret) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Secret {
        data = typeof data === 'object' ? data : {};
        let result = new Secret();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data; 
    }
}

export interface ISecret {
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;
}

export enum TokenUsage {
    ReUse = 0,
    OneTimeOnly = 1,
}

export enum TokenExpiration {
    Sliding = 0,
    Absolute = 1,
}

export enum AccessTokenType {
    Jwt = 0,
    Reference = 1,
}

export class ClientClaim implements IClientClaim {
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;

    constructor(data?: IClientClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): ClientClaim {
        data = typeof data === 'object' ? data : {};
        let result = new ClientClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        return data; 
    }
}

export interface IClientClaim {
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
}

export class ExampleGrantType implements IExampleGrantType {
    name?: string | undefined;
    grantType?: string[] | undefined;
    desc?: string | undefined;

    constructor(data?: IExampleGrantType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["grantType"])) {
                this.grantType = [] as any;
                for (let item of _data["grantType"])
                    this.grantType!.push(item);
            }
            this.desc = _data["desc"];
        }
    }

    static fromJS(data: any): ExampleGrantType {
        data = typeof data === 'object' ? data : {};
        let result = new ExampleGrantType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.grantType)) {
            data["grantType"] = [];
            for (let item of this.grantType)
                data["grantType"].push(item);
        }
        data["desc"] = this.desc;
        return data; 
    }
}

export interface IExampleGrantType {
    name?: string | undefined;
    grantType?: string[] | undefined;
    desc?: string | undefined;
}

export class EnabledScopeDto implements IEnabledScopeDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    required?: boolean;
    emphasize?: boolean;
    showInDiscoveryDocument?: boolean;
    /** 类型标记   身份/API */
    typeTag?: string | undefined;

    constructor(data?: IEnabledScopeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.typeTag = _data["typeTag"];
        }
    }

    static fromJS(data: any): EnabledScopeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnabledScopeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["typeTag"] = this.typeTag;
        return data; 
    }
}

export interface IEnabledScopeDto {
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    required?: boolean;
    emphasize?: boolean;
    showInDiscoveryDocument?: boolean;
    /** 类型标记   身份/API */
    typeTag?: string | undefined;
}

export class PaginationResultOfIdentityResourceDto extends Result implements IPaginationResultOfIdentityResourceDto {
    rows?: IdentityResourceDto[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfIdentityResourceDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(IdentityResourceDto.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfIdentityResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfIdentityResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfIdentityResourceDto extends IResult {
    rows?: IdentityResourceDto[] | undefined;
    total?: number;
    pageSize?: number;
}

export class IdentityResource extends Resource implements IIdentityResource {
    required?: boolean;
    emphasize?: boolean;

    constructor(data?: IIdentityResource) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
        }
    }

    static fromJS(data: any): IdentityResource {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityResource extends IResource {
    required?: boolean;
    emphasize?: boolean;
}

export class IdentityResourceDto extends IdentityResource implements IIdentityResourceDto {
    id?: number | undefined;
    name!: string;

    constructor(data?: IIdentityResourceDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IdentityResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityResourceDto extends IIdentityResource {
    id?: number | undefined;
    name: string;
}

export class PaginationResultOfPermisson extends Result implements IPaginationResultOfPermisson {
    rows?: Permisson[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfPermisson) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(Permisson.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfPermisson {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfPermisson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfPermisson extends IResult {
    rows?: Permisson[] | undefined;
    total?: number;
    pageSize?: number;
}

export class Permisson implements IPermisson {
    id?: string | undefined;
    name!: string;
    displyName!: string;
    desc?: string | undefined;
    enabled?: boolean;

    constructor(data?: IPermisson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displyName = _data["displyName"];
            this.desc = _data["desc"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): Permisson {
        data = typeof data === 'object' ? data : {};
        let result = new Permisson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displyName"] = this.displyName;
        data["desc"] = this.desc;
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface IPermisson {
    id?: string | undefined;
    name: string;
    displyName: string;
    desc?: string | undefined;
    enabled?: boolean;
}

export class PaginationResultOfApplicationRole extends Result implements IPaginationResultOfApplicationRole {
    rows?: ApplicationRole[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfApplicationRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(ApplicationRole.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfApplicationRole {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfApplicationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfApplicationRole extends IResult {
    rows?: ApplicationRole[] | undefined;
    total?: number;
    pageSize?: number;
}

export class IdentityRoleOfString implements IIdentityRoleOfString {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;

    constructor(data?: IIdentityRoleOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.concurrencyStamp = _data["concurrencyStamp"];
        }
    }

    static fromJS(data: any): IdentityRoleOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityRoleOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        return data; 
    }
}

export interface IIdentityRoleOfString {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
}

export class IdentityRole extends IdentityRoleOfString implements IIdentityRole {

    constructor(data?: IIdentityRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityRole {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityRole extends IIdentityRoleOfString {
}

export class ApplicationRole extends IdentityRole implements IApplicationRole {
    desc?: string | undefined;
    nonEditable?: boolean;

    constructor(data?: IApplicationRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.desc = _data["desc"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): ApplicationRole {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["desc"] = this.desc;
        data["nonEditable"] = this.nonEditable;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationRole extends IIdentityRole {
    desc?: string | undefined;
    nonEditable?: boolean;
}

export class ReAddPermissonsToRoleDto implements IReAddPermissonsToRoleDto {
    roleId!: string;
    permissonIds?: string[] | undefined;

    constructor(data?: IReAddPermissonsToRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["permissonIds"])) {
                this.permissonIds = [] as any;
                for (let item of _data["permissonIds"])
                    this.permissonIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ReAddPermissonsToRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReAddPermissonsToRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (Array.isArray(this.permissonIds)) {
            data["permissonIds"] = [];
            for (let item of this.permissonIds)
                data["permissonIds"].push(item);
        }
        return data; 
    }
}

export interface IReAddPermissonsToRoleDto {
    roleId: string;
    permissonIds?: string[] | undefined;
}

export class PaginationResultOfApplicationUser extends Result implements IPaginationResultOfApplicationUser {
    rows?: ApplicationUser[] | undefined;
    total?: number;
    pageSize?: number;

    constructor(data?: IPaginationResultOfApplicationUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(ApplicationUser.fromJS(item));
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationResultOfApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationResultOfApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        super.toJSON(data);
        return data; 
    }
}

export interface IPaginationResultOfApplicationUser extends IResult {
    rows?: ApplicationUser[] | undefined;
    total?: number;
    pageSize?: number;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    photo?: string | undefined;
    password?: string | undefined;
    sex?: number;
    desc?: string | undefined;
    classId?: string | undefined;
    name?: string | undefined;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.photo = _data["photo"];
            this.password = _data["password"];
            this.sex = _data["sex"];
            this.desc = _data["desc"];
            this.classId = _data["classId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["photo"] = this.photo;
        data["password"] = this.password;
        data["sex"] = this.sex;
        data["desc"] = this.desc;
        data["classId"] = this.classId;
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationUser extends IIdentityUser {
    photo?: string | undefined;
    password?: string | undefined;
    sex?: number;
    desc?: string | undefined;
    classId?: string | undefined;
    name?: string | undefined;
}

export class CreateOrUpdateUserViewModel implements ICreateOrUpdateUserViewModel {
    id?: string | undefined;
    userName?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;

    constructor(data?: ICreateOrUpdateUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateUserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["password"] = this.password;
        return data; 
    }
}

export interface ICreateOrUpdateUserViewModel {
    id?: string | undefined;
    userName?: string | undefined;
    name?: string | undefined;
    password?: string | undefined;
}

export class OperationBase implements IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;

    constructor(data?: IOperationBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): OperationBase {
        data = typeof data === 'object' ? data : {};
        let result = new OperationBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        return data; 
    }
}

export interface IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;
}

export class Operation extends OperationBase implements IOperation {
    value?: any | undefined;

    constructor(data?: IOperation) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface IOperation extends IOperationBase {
    value?: any | undefined;
}

export class AddToRolesDto implements IAddToRolesDto {
    userId!: string;
    roleIds!: string[];

    constructor(data?: IAddToRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roleIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            if (Array.isArray(_data["roleIds"])) {
                this.roleIds = [] as any;
                for (let item of _data["roleIds"])
                    this.roleIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddToRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddToRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.roleIds)) {
            data["roleIds"] = [];
            for (let item of this.roleIds)
                data["roleIds"].push(item);
        }
        return data; 
    }
}

export interface IAddToRolesDto {
    userId: string;
    roleIds: string[];
}

export class IdentityUserClaimOfString implements IIdentityUserClaimOfString {
    id?: number;
    userId?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IIdentityUserClaimOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): IdentityUserClaimOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserClaimOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data; 
    }
}

export interface IIdentityUserClaimOfString {
    id?: number;
    userId?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ApplicationIdentityUserClaim extends IdentityUserClaimOfString implements IApplicationIdentityUserClaim {
    claimValueType?: string | undefined;

    constructor(data?: IApplicationIdentityUserClaim) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.claimValueType = _data["claimValueType"];
        }
    }

    static fromJS(data: any): ApplicationIdentityUserClaim {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationIdentityUserClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["claimValueType"] = this.claimValueType;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationIdentityUserClaim extends IIdentityUserClaimOfString {
    claimValueType?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}