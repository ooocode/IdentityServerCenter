"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiException = exports.ApplicationIdentityUserClaim = exports.IdentityUserClaimOfString = exports.AddToRolesViewModel = exports.CreateOrUpdateUserViewModel = exports.ApplicationUser = exports.IdentityUser = exports.IdentityUserOfString = exports.PaginationResultOfApplicationUser = exports.ReAddPermissonsToRoleDto = exports.ApplicationRole = exports.IdentityRole = exports.IdentityRoleOfString = exports.PaginationResultOfApplicationRole = exports.Permisson = exports.PaginationResultOfPermisson = exports.Result = exports.UsersClient = exports.RolesClient = exports.PermissonsClient = void 0;
var PermissonsClient = /** @class */ (function () {
    function PermissonsClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:9999";
    }
    /**
     * 获取所有权限
     * @param skip (optional)
     * @param take (optional)
     * @param search (optional)
     */
    PermissonsClient.prototype.getPermissons = function (skip, take, search) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Permissons?";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPermissons(_response);
        });
    };
    PermissonsClient.prototype.processGetPermissons = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = PaginationResultOfPermisson.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 创建或者更新权限
     */
    PermissonsClient.prototype.createOrUpdatePermisson = function (permisson) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Permissons";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(permisson);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateOrUpdatePermisson(_response);
        });
    };
    PermissonsClient.prototype.processCreateOrUpdatePermisson = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_1 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_1, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 根据id获取权限
     */
    PermissonsClient.prototype.getPermissonById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Permissons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPermissonById(_response);
        });
    };
    PermissonsClient.prototype.processGetPermissonById = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = Permisson.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 删除权限
     */
    PermissonsClient.prototype.deletePermisson = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Permissons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeletePermisson(_response);
        });
    };
    PermissonsClient.prototype.processDeletePermisson = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_2 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_2, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return PermissonsClient;
}());
exports.PermissonsClient = PermissonsClient;
var RolesClient = /** @class */ (function () {
    function RolesClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:9999";
    }
    /**
     * 查询角色列表
     * @param skip (optional)
     * @param take (optional)
     * @param search (optional)
     */
    RolesClient.prototype.getRoles = function (skip, take, search) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetRoles(_response);
        });
    };
    RolesClient.prototype.processGetRoles = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = PaginationResultOfApplicationRole.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 创建或者更新角色
     */
    RolesClient.prototype.createOrUpdateRole = function (role) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(role);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateOrUpdateRole(_response);
        });
    };
    RolesClient.prototype.processCreateOrUpdateRole = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_3 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_3, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 通过id获取角色
     */
    RolesClient.prototype.getRoleById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetRoleById(_response);
        });
    };
    RolesClient.prototype.processGetRoleById = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ApplicationRole.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 删除角色
     */
    RolesClient.prototype.deleteRoleById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteRoleById(_response);
        });
    };
    RolesClient.prototype.processDeleteRoleById = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_4 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_4, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 获取角色拥有的权限
     */
    RolesClient.prototype.getRolePermissons = function (roleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles/{roleId}/permissons";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetRolePermissons(_response);
        });
    };
    RolesClient.prototype.processGetRolePermissons = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(Permisson.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 重新分配权限到角色
     */
    RolesClient.prototype.reAddPermissonsToRole = function (roleId, dto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Roles/{roleId}/permissons";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(dto);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processReAddPermissonsToRole(_response);
        });
    };
    RolesClient.prototype.processReAddPermissonsToRole = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_5 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_5, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return RolesClient;
}());
exports.RolesClient = RolesClient;
var UsersClient = /** @class */ (function () {
    function UsersClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:9999";
    }
    /**
     * 查询用户列表
     * @param skip (optional)
     * @param take (optional)
     * @param search (optional)
     */
    UsersClient.prototype.getUsers = function (skip, take, search) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetUsers(_response);
        });
    };
    UsersClient.prototype.processGetUsers = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = PaginationResultOfApplicationUser.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 创建或者更新用户
     */
    UsersClient.prototype.createOrUpdateUser = function (viewModel) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(viewModel);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateOrUpdateUser(_response);
        });
    };
    UsersClient.prototype.processCreateOrUpdateUser = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 通过id获取角色
     */
    UsersClient.prototype.getUserById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetUserById(_response);
        });
    };
    UsersClient.prototype.processGetUserById = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ApplicationUser.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 通过id删除用户
     */
    UsersClient.prototype.deleteUserById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteUserById(_response);
        });
    };
    UsersClient.prototype.processDeleteUserById = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_6 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_6, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 获取用户拥有的角色
     */
    UsersClient.prototype.getRolesOfUser = function (userId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/roles";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetRolesOfUser(_response);
        });
    };
    UsersClient.prototype.processGetRolesOfUser = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(ApplicationRole.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 为用户分配角色
     */
    UsersClient.prototype.addToRoles = function (userId, viewModel) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/roles";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(viewModel);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAddToRoles(_response);
        });
    };
    UsersClient.prototype.processAddToRoles = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_7 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_7, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 获取用户声明
     */
    UsersClient.prototype.getUserClaims = function (userId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/claims";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetUserClaims(_response);
        });
    };
    UsersClient.prototype.processGetUserClaims = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(ApplicationIdentityUserClaim.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 创建或者更新角色声明
     */
    UsersClient.prototype.createOrUpdateUserClaim = function (userId, claim) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/claims";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(claim);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processCreateOrUpdateUserClaim(_response);
        });
    };
    UsersClient.prototype.processCreateOrUpdateUserClaim = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_8 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_8, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 删除用户声明
     */
    UsersClient.prototype.deleteUserClaim = function (userId, claimId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/claims/{claimId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteUserClaim(_response);
        });
    };
    UsersClient.prototype.processDeleteUserClaim = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_9 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_9, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * 用户拥有的权限
     */
    UsersClient.prototype.getPermissonsOfUser = function (userId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Users/{userId}/Permissons";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPermissonsOfUser(_response);
        });
    };
    UsersClient.prototype.processGetPermissonsOfUser = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return UsersClient;
}());
exports.UsersClient = UsersClient;
var Result = /** @class */ (function () {
    function Result(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Result.prototype.init = function (_data) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.errorMessage = _data["errorMessage"];
        }
    };
    Result.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Result();
        result.init(data);
        return result;
    };
    Result.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["errorMessage"] = this.errorMessage;
        return data;
    };
    return Result;
}());
exports.Result = Result;
var PaginationResultOfPermisson = /** @class */ (function (_super) {
    __extends(PaginationResultOfPermisson, _super);
    function PaginationResultOfPermisson(data) {
        return _super.call(this, data) || this;
    }
    PaginationResultOfPermisson.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [];
                for (var _i = 0, _a = _data["rows"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.rows.push(Permisson.fromJS(item));
                }
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    };
    PaginationResultOfPermisson.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PaginationResultOfPermisson();
        result.init(data);
        return result;
    };
    PaginationResultOfPermisson.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
                var item = _a[_i];
                data["rows"].push(item.toJSON());
            }
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return PaginationResultOfPermisson;
}(Result));
exports.PaginationResultOfPermisson = PaginationResultOfPermisson;
var Permisson = /** @class */ (function () {
    function Permisson(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Permisson.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displyName = _data["displyName"];
            this.desc = _data["desc"];
            this.enabled = _data["enabled"];
        }
    };
    Permisson.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Permisson();
        result.init(data);
        return result;
    };
    Permisson.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displyName"] = this.displyName;
        data["desc"] = this.desc;
        data["enabled"] = this.enabled;
        return data;
    };
    return Permisson;
}());
exports.Permisson = Permisson;
var PaginationResultOfApplicationRole = /** @class */ (function (_super) {
    __extends(PaginationResultOfApplicationRole, _super);
    function PaginationResultOfApplicationRole(data) {
        return _super.call(this, data) || this;
    }
    PaginationResultOfApplicationRole.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [];
                for (var _i = 0, _a = _data["rows"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.rows.push(ApplicationRole.fromJS(item));
                }
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    };
    PaginationResultOfApplicationRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PaginationResultOfApplicationRole();
        result.init(data);
        return result;
    };
    PaginationResultOfApplicationRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
                var item = _a[_i];
                data["rows"].push(item.toJSON());
            }
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return PaginationResultOfApplicationRole;
}(Result));
exports.PaginationResultOfApplicationRole = PaginationResultOfApplicationRole;
var IdentityRoleOfString = /** @class */ (function () {
    function IdentityRoleOfString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IdentityRoleOfString.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.concurrencyStamp = _data["concurrencyStamp"];
        }
    };
    IdentityRoleOfString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IdentityRoleOfString();
        result.init(data);
        return result;
    };
    IdentityRoleOfString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        return data;
    };
    return IdentityRoleOfString;
}());
exports.IdentityRoleOfString = IdentityRoleOfString;
var IdentityRole = /** @class */ (function (_super) {
    __extends(IdentityRole, _super);
    function IdentityRole(data) {
        return _super.call(this, data) || this;
    }
    IdentityRole.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
    };
    IdentityRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IdentityRole();
        result.init(data);
        return result;
    };
    IdentityRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return IdentityRole;
}(IdentityRoleOfString));
exports.IdentityRole = IdentityRole;
var ApplicationRole = /** @class */ (function (_super) {
    __extends(ApplicationRole, _super);
    function ApplicationRole(data) {
        return _super.call(this, data) || this;
    }
    ApplicationRole.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            this.desc = _data["desc"];
            this.nonEditable = _data["nonEditable"];
        }
    };
    ApplicationRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ApplicationRole();
        result.init(data);
        return result;
    };
    ApplicationRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["desc"] = this.desc;
        data["nonEditable"] = this.nonEditable;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return ApplicationRole;
}(IdentityRole));
exports.ApplicationRole = ApplicationRole;
var ReAddPermissonsToRoleDto = /** @class */ (function () {
    function ReAddPermissonsToRoleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ReAddPermissonsToRoleDto.prototype.init = function (_data) {
        if (_data) {
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["permissonIds"])) {
                this.permissonIds = [];
                for (var _i = 0, _a = _data["permissonIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissonIds.push(item);
                }
            }
        }
    };
    ReAddPermissonsToRoleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ReAddPermissonsToRoleDto();
        result.init(data);
        return result;
    };
    ReAddPermissonsToRoleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (Array.isArray(this.permissonIds)) {
            data["permissonIds"] = [];
            for (var _i = 0, _a = this.permissonIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["permissonIds"].push(item);
            }
        }
        return data;
    };
    return ReAddPermissonsToRoleDto;
}());
exports.ReAddPermissonsToRoleDto = ReAddPermissonsToRoleDto;
var PaginationResultOfApplicationUser = /** @class */ (function (_super) {
    __extends(PaginationResultOfApplicationUser, _super);
    function PaginationResultOfApplicationUser(data) {
        return _super.call(this, data) || this;
    }
    PaginationResultOfApplicationUser.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [];
                for (var _i = 0, _a = _data["rows"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.rows.push(ApplicationUser.fromJS(item));
                }
            }
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    };
    PaginationResultOfApplicationUser.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PaginationResultOfApplicationUser();
        result.init(data);
        return result;
    };
    PaginationResultOfApplicationUser.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
                var item = _a[_i];
                data["rows"].push(item.toJSON());
            }
        }
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return PaginationResultOfApplicationUser;
}(Result));
exports.PaginationResultOfApplicationUser = PaginationResultOfApplicationUser;
var IdentityUserOfString = /** @class */ (function () {
    function IdentityUserOfString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IdentityUserOfString.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    };
    IdentityUserOfString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IdentityUserOfString();
        result.init(data);
        return result;
    };
    IdentityUserOfString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    };
    return IdentityUserOfString;
}());
exports.IdentityUserOfString = IdentityUserOfString;
var IdentityUser = /** @class */ (function (_super) {
    __extends(IdentityUser, _super);
    function IdentityUser(data) {
        return _super.call(this, data) || this;
    }
    IdentityUser.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
    };
    IdentityUser.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IdentityUser();
        result.init(data);
        return result;
    };
    IdentityUser.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return IdentityUser;
}(IdentityUserOfString));
exports.IdentityUser = IdentityUser;
var ApplicationUser = /** @class */ (function (_super) {
    __extends(ApplicationUser, _super);
    function ApplicationUser(data) {
        return _super.call(this, data) || this;
    }
    ApplicationUser.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            this.photo = _data["photo"];
            this.password = _data["password"];
            this.sex = _data["sex"];
            this.desc = _data["desc"];
            this.classId = _data["classId"];
            this.name = _data["name"];
        }
    };
    ApplicationUser.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ApplicationUser();
        result.init(data);
        return result;
    };
    ApplicationUser.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["photo"] = this.photo;
        data["password"] = this.password;
        data["sex"] = this.sex;
        data["desc"] = this.desc;
        data["classId"] = this.classId;
        data["name"] = this.name;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return ApplicationUser;
}(IdentityUser));
exports.ApplicationUser = ApplicationUser;
var CreateOrUpdateUserViewModel = /** @class */ (function () {
    function CreateOrUpdateUserViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateOrUpdateUserViewModel.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.password = _data["password"];
        }
    };
    CreateOrUpdateUserViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateUserViewModel();
        result.init(data);
        return result;
    };
    CreateOrUpdateUserViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["password"] = this.password;
        return data;
    };
    return CreateOrUpdateUserViewModel;
}());
exports.CreateOrUpdateUserViewModel = CreateOrUpdateUserViewModel;
/** 为用户分配角色视图模型 */
var AddToRolesViewModel = /** @class */ (function () {
    function AddToRolesViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.roleIds = [];
        }
    }
    AddToRolesViewModel.prototype.init = function (_data) {
        if (_data) {
            this.userId = _data["userId"];
            if (Array.isArray(_data["roleIds"])) {
                this.roleIds = [];
                for (var _i = 0, _a = _data["roleIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roleIds.push(item);
                }
            }
        }
    };
    AddToRolesViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AddToRolesViewModel();
        result.init(data);
        return result;
    };
    AddToRolesViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.roleIds)) {
            data["roleIds"] = [];
            for (var _i = 0, _a = this.roleIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roleIds"].push(item);
            }
        }
        return data;
    };
    return AddToRolesViewModel;
}());
exports.AddToRolesViewModel = AddToRolesViewModel;
var IdentityUserClaimOfString = /** @class */ (function () {
    function IdentityUserClaimOfString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IdentityUserClaimOfString.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    };
    IdentityUserClaimOfString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IdentityUserClaimOfString();
        result.init(data);
        return result;
    };
    IdentityUserClaimOfString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    };
    return IdentityUserClaimOfString;
}());
exports.IdentityUserClaimOfString = IdentityUserClaimOfString;
var ApplicationIdentityUserClaim = /** @class */ (function (_super) {
    __extends(ApplicationIdentityUserClaim, _super);
    function ApplicationIdentityUserClaim(data) {
        return _super.call(this, data) || this;
    }
    ApplicationIdentityUserClaim.prototype.init = function (_data) {
        _super.prototype.init.call(this, _data);
        if (_data) {
            this.claimValueType = _data["claimValueType"];
        }
    };
    ApplicationIdentityUserClaim.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ApplicationIdentityUserClaim();
        result.init(data);
        return result;
    };
    ApplicationIdentityUserClaim.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["claimValueType"] = this.claimValueType;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return ApplicationIdentityUserClaim;
}(IdentityUserClaimOfString));
exports.ApplicationIdentityUserClaim = ApplicationIdentityUserClaim;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=api.js.map